import Foundation

{% if argument.testable %}@testable import {{ argument.testable }}{% endif %}

{% macro functionCallType method %}{% if method.parameters.count == 0 %}FunctionVoidCall{% else %}FunctionCall{% endif %}{% endmacro %}

{% macro functionCallArgumentsType method %}{% if method.parameters.count == 1 %}{{ method.parameters.first.typeName.unwrappedTypeName }}{% else %}({% for param in method.parameters %}{{ param.name }}: {{ param.typeName.unwrappedTypeName }}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}{% endmacro %}

{% macro functionCallReturnType method %}{% if not method.returnTypeName.isVoid %}{{ method.returnTypeName }}{% else %}Void{% endif %}{% endmacro %}

{% macro stubCallArguments method %}{% if method.parameters.count > 0 %}, argument: {% if method.parameters.count == 1 %}{{ method.parameters.first.name }}{% else %}({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}{% endif %}{% endmacro %}

{% macro mockVariableGetterCall variable %}let {{ variable.name }}GetCall = FunctionVoidCall<{{ variable.typeName }}>(){% endmacro %}
{% macro mockVariableSetterCall variable %}let {{ variable.name }}SetCall = FunctionCall<{{ variable.typeName }}, Void>(){% endmacro %}

{% macro mockVariable variable %}

	// MARK: {{ variable.name }}

	{% call mockVariableGetterCall variable %}
	{% if variable.isMutable %}{% call mockVariableSetterCall variable %}{% endif %}
	var {{ variable.name }}: {{ variable.typeName }} {
		get { return stubCall({{ variable.name }}GetCall) }
		{% if variable.isMutable %}set { stubCall({{ variable.name }}SetCall, argument: newValue) }{% endif %}
	}
{% endmacro %}

{% for type in types.protocols %}
class {{ type.name|replace:"Protocol","" }}TestDouble: {{ type.name }} {
{% for variable in type.allVariables|!definedInExtension %}
	{% call mockVariable variable %}
{% if not forloop.last %}
{% endif %}
{% endfor %}

{% for method in type.allMethods|!definedInExtension %}

	// MARK: {{ method.shortName }}

	let {{ method.shortName }}Call = {% call functionCallType method %}<{% if method.parameters.count > 0 %}{% call functionCallArgumentsType method %}, {% endif %}{% call functionCallReturnType method %}>()
	func {{ method.name }}{% if method.throws %} throws{% endif %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
		return stubCall({{ method.shortName }}Call{% call stubCallArguments method %}{% if method.returnTypeName.isVoid %}, defaultValue: ()){% else %}){% endif %}
	}
{% if not forloop.last %}
{% endif %}
{% endfor %}
}
{% if not forloop.last %}

{% endif %}
{% endfor %}
